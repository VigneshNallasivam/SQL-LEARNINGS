//FILE READING AND WRITING - FILE I/O



                                 FILE READING AND WRITING - FILE I/O  
								 ===================================
- There are multiple ways of writing and reading a text file. 
- This is required while dealing with many applications. 
- There are several ways to read & write a plain text file in Java, which having Absolute Path & Relative Paths
  

                                              READING
                                              =======	
- Reading can be done in following ways,
  Namely:- 
  =>Using File & BufferedReader class (Using Absolute Path)       
  =>Using File & Scanner class (Using Absolute Path)        
  =>Using File Reader class (Using Absolute Path)

Example:-
---------
//USING FILE READER CLASS
import java.io.FileReader;
public class Sample 
{
	public static void main(String[] args) throws Exception
	{
		FileReader reader = new FileReader("C:\\Stream\\Msg.txt");
		int i;
		while((i=reader.read()) != -1)
		{
			System.out.print((char)i);
		}
		reader.close();
	}
}
OUTPUT>>		
--------
Hai..! Good Morning To All.

Example:-
---------
//USING FILE & BUFFEREDREADER CLASS 
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
public class Sample  
{
	public static void main(String[] args) throws Exception
	{
		File data = new File("C:\\Stream\\Msg.txt");
		BufferedReader reader = new BufferedReader(new FileReader(data));
		String str;
			while((str = reader.readLine()) != null)
			{
				System.out.println(str);
			}
	}
}
OUTPUT>>
--------
Hai..! Good Morning To All.


Example:-
---------
//USING FILE & SCANNER CLASS(Absolute Path)
import java.io.File;
import java.util.Scanner;
public class Sample  
{
	public static void main(String[] args) throws Exception
	{
		File data = new File("C:\\Stream\\Msg.txt");
		Scanner scanner = new Scanner(data);
		while(scanner.hasNextLine())
		{
			System.out.println(scanner.nextLine());
		}
	}
}
OUTPUT>>
--------
Hai..! Good Morning To All.


                                                 WRITING
												 =======
- Writing can be done in following ways,
  Namely:- 
  =>Using writeString() Method (Using Absolute Path)
  =>Using BufferedWriter class (Using Absolute Path)             
  =>Using File Writer class (Using Absolute Path)

Example:-
---------
//USING FILE-WRITER CLASS
import java.io.FileWriter;
public class Sample  
{
	public static void main(String[] args) throws Exception 
	{
		String text = "Light Speed Quantum Rescue";
		FileWriter writer = new FileWriter("C:\\Stream\\Msg.txt");
		writer.write(text);
		System.out.println(text);
	}
}
OUTPUT>>
--------
Light Speed Quantum Rescue

Example:-
---------
//USING BUFFERED-WRITER CLASS
import java.io.BufferedWriter;
import java.io.FileWriter;
public class Sample  
{
	public static void main(String[] args) throws Exception 
	{
		String text = "Light Speed Quantum Rescue";
		BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\Stream\\Msg.txt"));
		writer.write(text);
		System.out.println(text);
	}
}
OUTPUT>>
--------
Light Speed Quantum Rescue

Example:-
---------
//USING writeString() METHOD
import java.nio.file.Files;
import java.nio.file.Path;
public class Sample  
{
	public static void main(String[] args) throws Exception 
	{
		String text = "Light Speed Quantum Rescue";
		Path track = Path.of("C:\\Stream\\Msg.txt");
		Files.writeString(track,text);
		String data = Files.readString(track);
		System.out.println(data);
	}
}
OUTPUT>>
--------
Light Speed Quantum Rescue

Example:-
---------
//READING & WRITING IN SINGLE CODING
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
public class Sample 
{
    public static void write() throws IOException
	{
		String text= "Good Learning!";
		StringBuffer buffer = new StringBuffer(" Hai ");
		buffer.append(text);
		Path fileName = Path.of("C:\\Stream\\.txt");
		Files.writeString(fileName, buffer);
		}
	public static void read() throws IOException
	{
		File file = new File("C:\\Stream\\.txt");
		BufferedReader br= new BufferedReader(new FileReader(file));
		String st;
		while ((st = br.readLine()) != null)
		{
			System.out.println(st);
		}
	}
	public static void main(String[] args) throws IOException
	{
		write();
		read();
    }
}
OUTPUT>>
--------
Hai Good Learning!


Example:-
---------
//USING FILE READING & WRITING, STRING-BUILDER/BUFFER,toString(),String.valueOf(),String.join()
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
public class Sample 
{
	public void ReadWrite() throws Exception
	{
		ArrayList<String> list = new ArrayList<>();
		list.add("Raghavendran is Good Boy");
		list.add("But Rock is A Bad Boy");
		list.add("[Paper, Rock, Scissor]");
		String text = String.valueOf(list);
		StringBuilder builder = new StringBuilder(text);
		builder.append("OOps..I dit it again");
		Path track = Path.of("C:\\Users\\lab\\Desktop\\Vini.txt");
		Files.writeString(track,builder);
		String data = Files.readString(track);
		System.out.println(data);
		String str = String.join(",",list);
		System.out.println(str);
	}
	public static void main(String[] args)throws Exception
	{
		Sample obj = new Sample();
		obj.ReadWrite();
	}
}
OUTPUT>>
--------
[Raghavendran is Good Boy, But Rock is A Bad Boy, [Paper, Rock, Scissor]]OOps..I dit it again
Raghavendran is Good Boy,But Rock is A Bad Boy,[Paper, Rock, Scissor]


												 